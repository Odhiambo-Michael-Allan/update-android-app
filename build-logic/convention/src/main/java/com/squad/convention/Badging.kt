package com.squad.convention

import com.android.SdkConstants
import com.android.build.api.artifact.SingleArtifact
import com.android.build.api.variant.ApplicationAndroidComponentsExtension
import com.android.build.gradle.BaseExtension
import com.google.common.truth.Truth.assertWithMessage
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity
import org.gradle.api.tasks.TaskAction
import org.gradle.configurationcache.extensions.capitalized
import org.gradle.kotlin.dsl.assign
import org.gradle.kotlin.dsl.register
import org.gradle.language.base.plugins.LifecycleBasePlugin
import org.gradle.process.ExecOperations
import java.io.File
import javax.inject.Inject

/**
 * This code is a part of a custom Gradle setup in an Android project. It defines tasks related to
 * generating and verifying APK badging information. Badging is metadata about an APK file that
 * includes information like package name, version, and supported screen sizes. The tasks are
 * designed to handle the generation of this information and to compare it against a predefined
 * "golden" version to ensure consistency.
 */

/**
 * This class represents a task that generates badging information from an APK file using the
 * 'aapt2' tool, which is part of the Android build tools.
 *
 * Properties:
 *  - badging -> The output file where the badging information will be saved.
 *  - apk -> The input APK file for which the badging information will be generated.
 *  - aapt2Executable -> The path to the 'aapt2' executable
 *  - execOperations -> Provides a way to execute an external command ( in this case, 'aapt2' )
 *
 *  taskAction() Executes the aapt2 tool with the 'dump badging' command to generate the badging
 *  information from the APK. The output is written to the file specified by 'badging'
 */
@CacheableTask
abstract class GenerateBadgingTask : DefaultTask() {

    @get:OutputFile
    abstract val badging: RegularFileProperty

    @get:PathSensitive(PathSensitivity.NONE)
    @get:InputFile
    abstract val apk: RegularFileProperty

    @get:PathSensitive(PathSensitivity.NONE)
    @get:InputFile
    abstract val aapt2Executable: RegularFileProperty

    @get:Inject
    abstract val execOperations: ExecOperations

    @TaskAction
    fun taskAction() {
        execOperations.exec {
            commandLine(
                aapt2Executable.get().asFile.absolutePath,
                "dump",
                "badging",
                apk.get().asFile.absolutePath,
            )
            standardOutput = badging.asFile.get().outputStream()
        }
    }
}

/**
 * This class represents a task that compares the generated badging information against a "golden"
 * reference file to ensure they are identical. This is useful for verifying that the APK hasn't
 * changed in ways that would alter the badging information unexpectedly.
 *
 * Properties
 * - output -> A dummy output directory used to ensure the task is considered up-to-date when inputs
 * haven't changed.
 * - goldenBadging -> The "golden" reference badging file
 * - generateBadging -> The badging file generated by the 'GenerateBadgingTask'
 * - updateBadgingTaskName -> The name of the task to update the "golden" badging file.
 *
 * taskAction() -> Compares the content of the generated badging file with the golden badging file
 * If they differ, it suggests running a task to update the golden file with the new badging
 * information.
 *
 * Summary
 * This code is used to manage and verify the metadata (badging) associated with APK files in an
 * Android project. It automates the process of generating this metadata, comparing it with a
 * known good version, and updating the reference file when necessary. This setup is useful
 * for maintaining consistency in the APK's metadata across builds and preventing
 * unexpected changes from slipping through.
 */
@CacheableTask
abstract class CheckBadgingTask : DefaultTask() {

    // In order for the task to be up-to-date when the inputs have not changed,
    // the task must declare an output, even if it's not used. Tasks with no
    // output are always run regardless of whether the inputs changed
    @get:OutputDirectory
    abstract val output: DirectoryProperty

    @get:PathSensitive( PathSensitivity.NONE )
    @get:InputFile
    abstract val goldenBadging: RegularFileProperty

    @get:PathSensitive( PathSensitivity.NONE )
    @get:InputFile
    abstract val generatedBadging: RegularFileProperty

    @get:Input
    abstract val updateBadgingTaskName: Property<String>

    override fun getGroup(): String = LifecycleBasePlugin.VERIFICATION_GROUP

    @TaskAction
    fun taskAction() {
        assertWithMessage(
            "Generated badging is different from golden badging! " +
                    "If this change is intended, run ./gradlew ${updateBadgingTaskName.get()}",
        )
            .that( generatedBadging.get().asFile.readText() )
            .isEqualTo( goldenBadging.get().asFile.readText() )
    }
}


/**
 * This method configures the badging tasks for each variant in the Android Project.
 *
 * For each variant, it registers three tasks:
 *  i.) GenerateBadgingTask: Generates badging information for the APK
 *  ii.) 'copy'Task( updateBadgingTaskname ): Updates the golden badging file with the newly
 *       generated one.
 *  iii.) CheckBadgingTask: Compares the generated badging information with the golden badging file.
 *
 *  The task names are dynamically generated based on the variant name.
 *
 * @param baseExtension: Provides access to the base Android Project settings
 * @param componentsExtension: Provides access to the variants and components in the Android build
 */
fun Project.configureBadgingTasks(
    baseExtension: BaseExtension,
    componentsExtension: ApplicationAndroidComponentsExtension,
) {
    // Registers a callback to be called, when a new variant is configured
    componentsExtension.onVariants { variant ->
        // Registers a new task to verify the app bundle.
        val capitalizedVariantName = variant.name.capitalized()
        val generateBadgingTaskName = "generate${capitalizedVariantName}Badging"
        val generateBadging =
            tasks.register<GenerateBadgingTask>( generateBadgingTaskName ) {
                apk = variant.artifacts.get( SingleArtifact.APK_FROM_BUNDLE )

                aapt2Executable = File(
                    baseExtension.sdkDirectory,
                    "${SdkConstants.FD_BUILD_TOOLS}/" +
                            "${baseExtension.buildToolsVersion}/" +
                            SdkConstants.FN_AAPT2,
                )


                badging = project.layout.buildDirectory.file(
                    "outputs/apk_from_bundle/${variant.name}/${variant.name}-badging.txt",
                )

            }

        val updateBadgingTaskName = "update${capitalizedVariantName}Badging"
        tasks.register<Copy>(updateBadgingTaskName) {
            from( generateBadging.get().badging )
            into( project.layout.projectDirectory )
        }

        val checkBadgingTaskName = "check${capitalizedVariantName}Badging"
        tasks.register<CheckBadgingTask>(checkBadgingTaskName) {
            goldenBadging = project.layout.projectDirectory.file("${variant.name}-badging.txt")

            generatedBadging = generateBadging.get().badging

            this.updateBadgingTaskName = updateBadgingTaskName

            output = project.layout.buildDirectory.dir("intermediates/$checkBadgingTaskName")

        }
    }
}